"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
import django
from pathlib import Path
from django.utils.translation import gettext_lazy

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY')
REDIRECT_IS_HTTPS = True
DEBUG = False

# Application definition
INSTALLED_APPS = [
    'daphne',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',
    'django.forms',
    'channels',
    'corsheaders',
    # User's app
    'utils.apps.UtilsConfig',
    'passkey.apps.PasskeyConfig',
    'account.apps.AccountConfig',
    'quiz.apps.QuizConfig',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

FORM_RENDERER = 'django.forms.renderers.TemplatesSetting'
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates'),
            os.path.join(BASE_DIR, 'utils', 'templates'),
            os.path.join(django.__path__[0], 'forms/templates'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
            'libraries': {
                'custom_tags': 'utils.tags.custom_tags',
                'room_tags': 'utils.tags.room_tags',
            },
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'
ASGI_APPLICATION = 'config.asgi.application'

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('POSTGRES_DB'),
        'USER': os.getenv('POSTGRES_USER'),
        'PASSWORD': os.getenv('POSTGRES_PASSWORD'),
        'HOST': os.getenv('DJANGO_DATABASE_HOST'),
        'PORT': int(os.getenv('DJANGO_DATABASE_PORT', '5432')),
        'OPTIONS': {
            'pool': True,
        },
        'TEST': {
            'NAME': 'test_db',
        },
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 12,
        },
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'account.validators.CustomPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = os.getenv('DJANGO_LANGUAGE_CODE', 'en')
LANGUAGES = [
    ('en', gettext_lazy('English')),
    ('ja', gettext_lazy('Japanese')),
]

TIME_ZONE = os.getenv('DJANGO_TIMEZONE', 'UTC')

USE_I18N = True

USE_TZ = True

LOCALE_PATHS = (
    os.path.join(BASE_DIR, 'account', 'locale'),
    os.path.join(BASE_DIR, 'config', 'locale'),
    os.path.join(BASE_DIR, 'passkey', 'locale'),
    os.path.join(BASE_DIR, 'quiz', 'locale'),
    os.path.join(BASE_DIR, 'templates', 'locale'),
    os.path.join(BASE_DIR, 'utils', 'locale'),
    os.path.join(BASE_DIR, 'utils', 'templates', 'locale'),
)

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = '/opt/nginx-static'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# ========================================
# = Custom settings defined by developer =
# ========================================
# Security setting
CORS_ALLOWED_ORIGINS = os.getenv('DJANGO_TRUSTED_ORIGINS').split(',')
CORS_PREFLIGHT_MAX_AGE = 60
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
USE_X_FORWARDED_HOST = True
USE_X_FORWARDED_PORT = True
CSRF_COOKIE_SECURE = True
# Define cach setting
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.redis.RedisCache',
        'LOCATION': '{host}://{host}:{port}'.format(host=os.getenv('DJANGO_REDIS_HOST', 'redis'), port=os.getenv('DJANGO_REDIS_PORT', 6379)),
    },
}
# Define channel layer
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            'hosts': [(os.getenv('DJANGO_REDIS_HOST', 'redis'), int(os.getenv('DJANGO_REDIS_PORT', '6379')))],
        },
    },
}
# Define session engine
SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
SESSION_COOKIE_AGE = 3 * 24 * 60 * 60
SESSION_COOKIE_SECURE = True
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
# Define the salt of hash value
HASH_SALT = os.getenv('DJANGO_HASH_SALT')
# Define relevant parameters of pass-key
FIDO_SERVER_ID = os.getenv('DJANGO_FIDO_SERVER_ID')
FIDO_SERVER_NAME = 'L.E.D Quiz'
KEY_ATTACHMENT = None
# Define custom user model
AUTH_USER_MODEL = 'account.User'
AUTHENTICATION_BACKENDS = [
    'passkey.backend.PasskeyModelBackend',
]
LOGIN_URL = 'account:login'
LOGIN_REDIRECT_URL = 'utils:index'
LOGOUT_URL = 'account:logout'
LOGOUT_REDIRECT_URL = 'utils:index'
# Define comma interval to use human readable expression
NUMBER_GROUPING = 3
# Define configuration of account registration and password reset timeout
ACTIVATION_TIMEOUT_SECONDS = 10*60
PASSWORD_RESET_TIMEOUT = 5*60
# Setup e-mail
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = os.getenv('DJANGO_EMAIL_ADDRESS')
EMAIL_HOST_PASSWORD = os.getenv('DJANGO_APPLICATION_PASSWORD')
DEFAULT_FROM_EMAIL = 'no-reply@led.quiz.com'
# User definition variables
MAX_CSV_FILESIZE = 1024 * 1024 * 8
CSV_DOWNLOAD_MAX_AGE = 5 * 60
NGINX_FORWARDING_PORT = os.getenv('DJANGO_NGINX_FORWARDING_PORT', '')

# Log setting
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{asctime}[{levelname}] {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'verbose_console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
    },
    'root': {
        'handlers': ['verbose_console'],
        'level': 'INFO',
        'propagate': False,
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}