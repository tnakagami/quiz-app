# Generated by Django 5.2.3 on 2025-06-22 14:44

import django.core.validators
import django.db.models.deletion
import quiz.models
import utils.models
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Required. 128 characters or fewer.', max_length=128, unique=True, verbose_name='Genre name')),
                ('is_enabled', models.BooleanField(default=True, help_text='Describes whether this genre is enabled or not.', verbose_name='Enable')),
                ('created_at', models.DateTimeField(default=utils.models.get_current_time, verbose_name='Created time')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Quiz',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('question', models.TextField(blank=True, help_text='Enter the question.', verbose_name='Question')),
                ('answer', models.JSONField(blank=True, help_text='Enter the answer for the question.', verbose_name='Answer')),
                ('is_completed', models.BooleanField(default=False, help_text='Describes whether the creation of this quiz is completed or not.', verbose_name='Creation status')),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quizzes', to=settings.AUTH_USER_MODEL, verbose_name='Creator')),
                ('genre', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quizzes', to='quiz.genre', verbose_name='Genre')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='QuizRoom',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Required. 128 characters or fewer.', max_length=128, verbose_name='Quiz name')),
                ('max_question', models.PositiveIntegerField(help_text='The maximum number of questions', validators=[django.core.validators.MinValueValidator(1)], verbose_name='Max question')),
                ('is_enabled', models.BooleanField(default=False, help_text='Describes whether this quiz room is enabled or not.', verbose_name='Enable')),
                ('created_at', models.DateTimeField(default=utils.models.get_current_time, verbose_name='Created time')),
                ('creators', models.ManyToManyField(blank=True, help_text='Creators used in the quiz room', related_name='room_creators', to=settings.AUTH_USER_MODEL, verbose_name='Creators')),
                ('genres', models.ManyToManyField(blank=True, help_text='Genres used in the quiz room', related_name='quiz_rooms', to='quiz.genre', verbose_name='Genres')),
                ('members', models.ManyToManyField(blank=True, help_text='Members assigned to the quiz room', related_name='room_members', to=settings.AUTH_USER_MODEL, verbose_name='Room members')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quiz_rooms', to=settings.AUTH_USER_MODEL, verbose_name='Owner')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Score',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.IntegerField(choices=[(1, 'Start'), (2, 'Waiting'), (3, 'Set question'), (4, 'Answering'), (5, 'Received answers'), (6, 'Judging'), (7, 'End')], default=1, verbose_name='Status')),
                ('count', models.PositiveIntegerField(default=1, help_text='The n-th question', validators=[django.core.validators.MinValueValidator(1)], verbose_name='Count')),
                ('scores', models.JSONField(blank=True, help_text='Store the scores of each member.', verbose_name='Scores')),
                ('quiz', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='scores', to='quiz.quiz', verbose_name='Quiz')),
                ('room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scores', to='quiz.quizroom', verbose_name='Room')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
